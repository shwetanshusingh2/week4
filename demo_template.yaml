AWSTemplateFormatVersion: "2010-09-09"
Description:
Resources:
  EventRule:
    Type: AWS::Events::Rule
    Properties:
      Description: "EventRule"
      EventPattern:
        source:
          - "aws.glue"
        detail-type:
          - "Glue Job State Change"
        detail:
          jobName:
            - "CSVCrawler123"
          state:
            - "FAILED"
      State: "ENABLED"
      Targets:
        - Arn:
            Fn::GetAtt:
              - "LambdaFunction"
              - "Arn"
          Id: "TargetFunctionV1"
  PermissionForEventsToInvokeLambda:
      Type: AWS::Lambda::Permission
      Properties:
        FunctionName:
          Ref: "LambdaFunction"
        Action: "lambda:InvokeFunction"
        Principal: "events.amazonaws.com"
        SourceArn:
          Fn::GetAtt:
            - "EventRule"
            - "Arn"
  csvjob:
      Type: AWS::Glue::Job
      Properties:
        AllocatedCapacity: 2
        Command:
          Name: glueetl
          ScriptLocation: s3://data-shwet/csvjob.py
          PythonVersion: '3'
        ExecutionProperty:
          MaxConcurrentRuns: 2
        Name: csv_job
        Role: !GetAtt roleglue.Arn
        GlueVersion: 1.0

  roleglue:
        Type: AWS::IAM::Role
        Properties:
          AssumeRolePolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Principal:
                  Service:
                    - "glue.amazonaws.com"
                Action:
                  - "sts:AssumeRole"
                  - "sts:AssumeRoleWithWebIdentity"
          Path: "/"
          Policies:
            - PolicyName: GluePolicy-week4
              PolicyDocument:
                Version: '2012-10-17'
                Statement:
                  - Effect: Allow
                    Action:
                      - s3:*
                      - logs:*
                      - glue:*
                    Resource: "*"
  LambdaRole:
        Type: AWS::IAM::Role
        Properties:
          AssumeRolePolicyDocument:
            Statement:
              - Action:
                  - sts:AssumeRole
                Effect: Allow
                Principal:
                  Service:
                    - lambda.amazonaws.com
            Version: 2012-10-17
          Path: /
          Policies:
            - PolicyName: S3Policy
              PolicyDocument:
                Version: '2012-10-17'
                Statement:
                  - Effect: "Allow"
                    Action:
                      - s3:GetObject
                      - s3:PutObject
                      - s3:DeleteObject
                      - glue:Get*
                      - glue:StartCrawler
                      - lambda:PublishVersion
                      - ses:SendEmail
                      - ses:SendRawEmail
                    Resource: "*"
  LambdaFunction:
          Type: AWS::Lambda::Function
          Properties:
            Code:
              S3Bucket: 'data-shwet'
              S3Key: 'lambda_trigger.zip'
            Handler: lambda_trigger.handler
            Runtime: python3.7
            Role: !GetAtt LambdaRole.Arn
